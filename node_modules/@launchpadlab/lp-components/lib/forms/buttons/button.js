'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A simple button component that can be used independently, or as part of a form.
 *
 * Conditionally adds classes and/or becomes disabled depending on passed props.
 * In addition to the props below, any extra props will be passed directly to the inner `<button>` element.
 * 
 * If a className is provided to the component, it will be appended to the conditionally added classes.
 * 
 * @name Button
 * @type Function
 * @param {Boolean} [invalid] - Whether or not a related form is invalid (will disable when `true`)
 * @param {Boolean} [pristine] - Whether or not a related form is pristine (will disable when `true`)
 * @param {String} [style="primary"] - A descriptive string that will be appended to the button's class with format `button-<type>`
 * @param {Boolean} [submitting] - Whether or not a related form is submitting (will give button class `'in-progress` when `true`)
 * @param {Boolean} [type="button"] - The [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) attribute of the button element
 * @param {Function} [children] - Any React component(s) being wrapped by the button
 * @example
 * 
 * function MessageButton ({ message }) {
 *   return (
 *      <Button
 *        style="secondary"
 *        onClick={ () => console.log(message) }
 *      > 
 *        Print Message
 *      </Button>
 *   )
 * }
 *
 * // For a more in-depth example of using buttons with forms, see the docs for SubmitButton.
 *
**/

var propTypes = {
  invalid: _propTypes2.default.bool,
  pristine: _propTypes2.default.bool,
  style: _propTypes2.default.string,
  submitting: _propTypes2.default.bool,
  type: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.node,
  className: _propTypes2.default.string
};

var defaultProps = {
  style: 'primary',
  type: 'button',
  className: ''
};

// eslint-disable-next-line no-unused-vars
function Button(_ref) {
  var children = _ref.children,
      type = _ref.type,
      style = _ref.style,
      pristine = _ref.pristine,
      invalid = _ref.invalid,
      submitting = _ref.submitting,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ['children', 'type', 'style', 'pristine', 'invalid', 'submitting', 'className']);

  return _react2.default.createElement(
    'button',
    _extends({
      type: type,
      className: (0, _helpers.buttonClasses)({ className: className, style: style, pristine: pristine, invalid: invalid, submitting: submitting }),
      disabled: pristine || invalid
    }, rest),
    children
  );
}

Button.propTypes = propTypes;
Button.defaultProps = defaultProps;

exports.default = Button;