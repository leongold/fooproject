'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A wrapper around the {@link Input} component that adds an icon to the input.
 *
 * This icon is rendered as an `<i>` tag, with a dynamic class based on the `icon` prop. 
 * For example, given an `icon` prop of `"twitter"`, the component will render an {@link Input} with child `<i className="twitter-icon"/>`.
 *
 * Additionally, the fieldset of this {@link Input} will be given the class `"icon-label"` for styling purposes.
 *
 * @name IconInput
 * @type Function
 * @param {String} icon - The name of the icon associated with the input
 * @example
 * 
 * function TwitterForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field 
 *          name="handle"
 *          component={ IconInput }
 *          icon="twitter"
 *          placeholder="Your twitter handle"
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = {
  className: _propTypes2.default.string,
  icon: _propTypes2.default.string.isRequired
};

function IconInput(props) {
  var icon = props.icon,
      className = props.className;

  return _react2.default.createElement(
    _input2.default,
    _extends({}, props, {
      className: (0, _classnames2.default)('icon-label', className)
    }),
    _react2.default.createElement('i', { className: icon + '-icon' })
  );
}

IconInput.propTypes = propTypes;

exports.default = IconInput;