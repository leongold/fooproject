'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _checkbox = require('./checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A group of checkboxes that can be used in a `redux-forms`-controlled form.
 *
 * The value of each checkbox is specified via the `options` prop. This prop can either be:
 * - An array of strings
 * - An array of numbers
 * - An array of key-value pairs: `{ key, value }`
 *
 * The value of the entire `CheckboxGroup` component is an **array** containing the values of the selected checkboxes (converted to strings).
 * Clicking an unselected checkbox adds its value to this array, and clicking a selected checkbox removes its value from this array.
 *
 * @name CheckboxGroup
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Array} options - An array of checkbox values (strings, numbers, or key-value pairs)
 * @example
 *
 * function TodoForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="completedTodos"
 *          component={ CheckboxGroup }
 *          options={[
 *            'Eat breakfast',
 *            'Respond to emails',
 *            'Take out the trash',
 *          ]}
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
 *
 * export default TodoForm
**/

var propTypes = _extends({}, _helpers.checkboxGroupPropTypes, {
  options: _helpers.fieldOptionsType
});

var defaultProps = {
  options: []
};

function CheckboxGroup(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      value = _omitLabelProps$input.value,
      onChange = _omitLabelProps$input.onChange,
      name = _omitLabelProps$input.name,
      meta = _omitLabelProps.meta,
      options = _omitLabelProps.options,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'options']);

  var optionObjects = (0, _utils.serializeOptions)(options);
  // Build change handler
  var handleChange = function handleChange(option) {
    return function (checked) {
      // Add or remove option value from array of values, depending on whether it's checked
      var newValueArray = checked ? (0, _utils.addToArray)([option.value], value) : (0, _utils.removeFromArray)([option.value], value);
      return onChange(newValueArray);
    };
  };
  return _react2.default.createElement(
    _labels.LabeledField,
    _extends({ className: 'CheckboxGroup' }, props),
    optionObjects.map(function (option, i) {
      return _react2.default.createElement(_checkbox2.default // eslint-disable-line react/jsx-key
      , _extends({
        key: i,
        input: {
          name: name + '.' + option.value,
          value: value.includes(option.value),
          onChange: handleChange(option)
        },
        meta: {},
        label: option.key
      }, rest));
    })
  );
}

CheckboxGroup.propTypes = propTypes;
CheckboxGroup.defaultProps = defaultProps;

exports.default = (0, _utils.compose)((0, _helpers.replaceEmptyStringValue)([]))(CheckboxGroup);