'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A component that returns an `<a>` element that can be used to change the value of an input in a `redux-forms`-controlled form.
 *
 * @name SetterLink
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {String} label - The link text
 * @param {Any} [valueToSet=true] - The value to set the input when clicked
 * @example
 *
 * function FilterForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *      { ... }
 *      <Field
 *         name="searchFilters"
 *         component={ SetterLink }
 *         label="Clear Search Filters"
 *         valueToSet={ [] }
 *       />
 *      <SubmitButton {...{ pristine, invalid, submitting }}>
 *        Submit
 *      </SubmitButton>
 *     </form>
 *   )
 * }
 *
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  label: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  valueToSet: _propTypes2.default.any
});

var defaultProps = {
  valueToSet: true
};

function SetterLink(_ref) {
  var _ref$input = _ref.input,
      name = _ref$input.name,
      onChange = _ref$input.onChange,
      onBlur = _ref$input.onBlur,
      label = _ref.label,
      valueToSet = _ref.valueToSet,
      className = _ref.className;

  return _react2.default.createElement(
    'a',
    {
      id: name,
      onClick: function onClick() {
        onChange(valueToSet);
        onBlur();
      },
      className: className
    },
    label
  );
}

SetterLink.propTypes = propTypes;
SetterLink.defaultProps = defaultProps;

exports.default = SetterLink;