'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _controls = require('../../controls');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * An color input that can be used in a `redux-forms`-controlled form.
 * The value of this input is a hex color string.
 * 
 * @name ColorInput
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @example
 * 
 * function UserForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field 
 *          name="favoriteColor"
 *          component={ ColorInput }
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, (0, _utils.togglePropTypes)('showDropdown'));

var defaultProps = {};

function ColorInput(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      value = _omitLabelProps$input.value,
      onBlur = _omitLabelProps$input.onBlur,
      _onChange = _omitLabelProps$input.onChange,
      showDropdown = _omitLabelProps.showDropdown,
      setShowDropdown = _omitLabelProps.setShowDropdown,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'showDropdown', 'setShowDropdown']);

  return _react2.default.createElement(
    _labels.LabeledField,
    _extends({ className: 'color-input' }, props),
    _react2.default.createElement(_controls.ColorPicker, {
      value: value,
      onChange: _onChange,
      active: showDropdown,
      onOpen: function onOpen() {
        return setShowDropdown(true);
      },
      onClose: function onClose() {
        setShowDropdown(false);
        onBlur();
      }
    }),
    _react2.default.createElement('input', _extends({
      type: 'text',
      className: 'hex-input',
      placeholder: '6 digit hex value',
      value: (0, _helpers.fromHex)(value),
      onChange: function onChange(e) {
        return _onChange((0, _helpers.toHex)(e.target.value));
      },
      onFocus: function onFocus() {
        return setShowDropdown(true);
      },
      onBlur: onBlur
    }, (0, _utils.filterInvalidDOMProps)(rest))),
    _react2.default.createElement(
      'span',
      { className: 'hex' },
      ' # '
    )
  );
}

ColorInput.propTypes = propTypes;
ColorInput.defaultProps = defaultProps;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)(), (0, _utils.toggle)('showDropdown'))(ColorInput);