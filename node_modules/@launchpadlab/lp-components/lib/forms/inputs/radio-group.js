'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
// import PropTypes from 'prop-types'


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A group of radio buttons that can be used in a `redux-forms`-controlled form.
 *
 * The value of each button is specified via the `options` prop. This prop can either be:
 * - An array of strings
 * - An array of numbers
 * - An array of key-value pairs: `{ key, value }`
 *
 * The value of the entire `RadioGroup` component is the value of the currently selected button (converted to a string).
 *
 * @name RadioGroup
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Array} options - An array of button values (strings, numbers, or key-value pairs)
 * @example
 *
 * function FavoriteFoodForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="favoriteFood"
 *          component={ RadioGroup }
 *          options={[
 *            'Bananas',
 *            'Pineapples',
 *            'Potatoes',
 *          ]}
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
 *
 * export default FavoriteFoodForm
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  options: _helpers.fieldOptionsType
});

var defaultProps = {
  options: []
};

function RadioGroup(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      value = _omitLabelProps$input.value,
      _onChange = _omitLabelProps$input.onChange,
      name = _omitLabelProps$input.name,
      meta = _omitLabelProps.meta,
      options = _omitLabelProps.options,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'options']);

  var optionObjects = (0, _utils.serializeOptions)(options);
  return _react2.default.createElement(
    _labels.LabeledField,
    _extends({ className: 'RadioGroup' }, props),
    optionObjects.map(function (option, i) {
      return _react2.default.createElement(_input2.default // eslint-disable-line react/jsx-key
      , _extends({
        key: i,
        type: 'radio',
        input: {
          name: name + '.' + option.value,
          value: '',
          onChange: function onChange() {
            return _onChange(option.value);
          }
        },
        meta: {},
        checked: value === option.value,
        label: option.key
      }, rest));
    })
  );
}

RadioGroup.propTypes = propTypes;
RadioGroup.defaultProps = defaultProps;

exports.default = RadioGroup;