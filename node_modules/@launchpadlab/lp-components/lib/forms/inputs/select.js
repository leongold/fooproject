'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A select input that can be used in a `redux-forms`-controlled form.
 *
 * The value of each option is specified via the `options` or the `optionGroups` prop.
 * The `options` prop will be ignored if `optionGroups` is present.
 *
 * The `options` prop can either be:
 * - An array of strings
 * - An array of numbers
 * - An array of key-value pairs: `{ key, value }`
 *
 * The `optionGroups` props must be an array of objects with the following keys:
 * - `name`: The name of the option group
 * - `options`: As above, an array of strings or key-value pairs.
 *
 * The value of the `Select` component will be the same as the value of the selected option (converted to a string).
 *
 * @name Select
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Array} options - An array of option values (strings, numbers, or key-value pairs). This prop will be ignored if `optionGroups` is present.
 * @param {Array} optionGroups - An array of option group objects
 * @param {String} [placeholder] - A string to display as a placeholder option
 * @param {Boolean} [enablePlaceholderOption=false] - A flag indicating that the placeholder option should not be `disabled`
 * @example
 *
 * // With string options
 *
 * function PaintColorForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="paintColor"
 *          component={ Select }
 *          options={[
 *            'Purple',
 *            'Green',
 *            'Magenta',
 *          ]}
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
 *
 * // With object options
 *
 * function EmployeeForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="employeeId"
 *          component={ Select }
 *          options={[
 *            { key: 'Janet', value: 100 },
 *            { key: 'Bob', value: 101 },
 *          ]}
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  enablePlaceholderOption: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  options: _helpers.fieldOptionsType,
  optionGroups: _helpers.fieldOptionGroupsType
});

var defaultProps = {
  enablePlaceholderOption: false,
  options: [],
  optionGroups: []
};

function Select(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      name = _omitLabelProps$input.name,
      value = _omitLabelProps$input.value,
      onBlur = _omitLabelProps$input.onBlur,
      onChange = _omitLabelProps$input.onChange,
      meta = _omitLabelProps.meta,
      className = _omitLabelProps.className,
      enablePlaceholderOption = _omitLabelProps.enablePlaceholderOption,
      options = _omitLabelProps.options,
      optionGroups = _omitLabelProps.optionGroups,
      placeholder = _omitLabelProps.placeholder,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'className', 'enablePlaceholderOption', 'options', 'optionGroups', 'placeholder']);

  var optionObjects = (0, _utils.serializeOptions)(options);
  var optionGroupObjects = (0, _utils.serializeOptionGroups)(optionGroups);
  return _react2.default.createElement(
    _labels.LabeledField,
    props,
    _react2.default.createElement(
      'select',
      _extends({
        id: name,
        className: (0, _classnames2.default)({ 'unselected': value === '' }),
        name: name,
        value: value,
        onBlur: onBlur,
        onChange: onChange
      }, rest),
      placeholder && _react2.default.createElement(
        'option',
        { value: '', disabled: !enablePlaceholderOption },
        placeholder
      ),
      optionGroupObjects.length ? optionGroupObjects.map(function (_ref, idx) {
        var name = _ref.name,
            options = _ref.options;
        return _react2.default.createElement(
          'optgroup',
          { key: idx, label: name },
          options.map(function (_ref2) {
            var key = _ref2.key,
                value = _ref2.value;
            return _react2.default.createElement(
              'option',
              { key: value, value: value },
              key
            );
          })
        );
      }) : optionObjects.map(function (_ref3) {
        var key = _ref3.key,
            value = _ref3.value;
        return _react2.default.createElement(
          'option',
          { key: value, value: value },
          key
        );
      })
    )
  );
}

Select.propTypes = propTypes;
Select.defaultProps = defaultProps;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)())(Select);