'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A checkbox input that can be used in a `redux-forms`-controlled form. 
 * 
 * This input only accepts and stores boolean values. 
 * 
 * @name Checkbox
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @example
 * 
 * function CoolPersonForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field name="isCool" component={ Checkbox } />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
 *
 * export default CoolPersonForm
**/

var propTypes = _extends({}, (0, _helpers.fieldPropTypesWithValue)(_propTypes2.default.bool), {
  label: _propTypes2.default.node
});

function Checkbox(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      name = _omitLabelProps$input.name,
      value = _omitLabelProps$input.value,
      onBlur = _omitLabelProps$input.onBlur,
      _onChange = _omitLabelProps$input.onChange,
      meta = _omitLabelProps.meta,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta']);

  return _react2.default.createElement(
    _labels.LabeledField,
    _extends({ className: 'checkbox' }, props),
    _react2.default.createElement('input', _extends({
      id: name,
      name: name,
      value: value,
      type: 'checkbox',
      checked: value,
      onBlur: onBlur,
      onChange: function onChange() {
        return _onChange(!value);
      }
    }, rest))
  );
}

Checkbox.propTypes = propTypes;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)(), (0, _helpers.replaceEmptyStringValue)(false))(Checkbox);