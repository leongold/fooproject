'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * An input element that can be used in a `redux-forms`-controlled form.
 *
 * Note: The `input` tag is surrounded by a `div` with class `"input-wrapper"`. 
 * Any children passed to this component will be rendered within this wrapper.
 * 
 * @name Input
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {String} [type] - A string to specify the type of input element (defaults to `text`)
 * @example
 * 
 * function UserForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field 
 *          name="firstName"
 *          component={ Input }
 *          placeholder="Your first name"
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  type: _propTypes2.default.string,
  children: _propTypes2.default.node
});

var defaultProps = {
  type: 'text'
};

function Input(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      name = _omitLabelProps$input.name,
      value = _omitLabelProps$input.value,
      onBlur = _omitLabelProps$input.onBlur,
      onChange = _omitLabelProps$input.onChange,
      meta = _omitLabelProps.meta,
      className = _omitLabelProps.className,
      type = _omitLabelProps.type,
      children = _omitLabelProps.children,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'className', 'type', 'children']);

  return _react2.default.createElement(
    _labels.LabeledField,
    props,
    _react2.default.createElement(
      'div',
      { className: 'input-wrapper' },
      _react2.default.createElement('input', _extends({
        id: name,
        name: name,
        type: type,
        value: value,
        onBlur: onBlur,
        onChange: onChange
      }, rest)),
      children
    )
  );
}

Input.defaultProps = defaultProps;
Input.propTypes = propTypes;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)())(Input);