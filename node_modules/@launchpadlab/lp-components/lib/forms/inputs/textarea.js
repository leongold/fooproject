'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A textarea input that can be used in a `redux-forms`-controlled form. Optionally displays a character count.
 *
 * @name Textarea
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Number} [maxLength] - The maximum allowed length of the input
 * @param {Boolean} [hideCharacterCount=false] - Whether to hide the character count if given a maxLength
 * @example
 *
 * function BiographyForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="biography"
 *          component={ Textarea }
 *          maxLength={ 1000 }
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  hideCharacterCount: _propTypes2.default.bool,
  maxLength: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool])
});

var defaultProps = {
  maxLength: null,
  hideCharacterCount: false
};

function Textarea(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      name = _omitLabelProps$input.name,
      value = _omitLabelProps$input.value,
      onBlur = _omitLabelProps$input.onBlur,
      onChange = _omitLabelProps$input.onChange,
      meta = _omitLabelProps.meta,
      hideCharacterCount = _omitLabelProps.hideCharacterCount,
      className = _omitLabelProps.className,
      maxLength = _omitLabelProps.maxLength,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'hideCharacterCount', 'className', 'maxLength']);

  return _react2.default.createElement(
    _labels.LabeledField,
    _extends({
      className: (0, _classnames2.default)(className, { 'with-character-count': !hideCharacterCount })
    }, props),
    maxLength !== null && !hideCharacterCount && _react2.default.createElement(
      'span',
      { className: 'character-count' },
      value.length + '/' + maxLength + ' characters'
    ),
    _react2.default.createElement('textarea', _extends({
      id: name,
      maxLength: maxLength,
      name: name,
      value: value,
      onBlur: onBlur,
      onChange: onChange
    }, rest))
  );
}

Textarea.propTypes = propTypes;

Textarea.defaultProps = defaultProps;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)())(Textarea);