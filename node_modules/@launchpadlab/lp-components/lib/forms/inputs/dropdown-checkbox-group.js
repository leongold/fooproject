'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _checkboxGroup = require('./checkbox-group');

var _checkboxGroup2 = _interopRequireDefault(_checkboxGroup);

var _helpers = require('../helpers');

var _labels = require('../labels');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A group of checkboxes that can be used in a `redux-forms`-controlled form. 
 * Wraps the {@link CheckboxGroup} component in a {@link DropdownSelect} component, which displays the selected values as a list.
 * Options are displayed in a scrollable `Select`-style dropdown container.
 *
 * The value of each checkbox is specified via the `options` prop. This prop can either be:
 * - An array of strings
 * - An array of key-value pairs: `{ key, value }`
 *
 * The value of the entire `DropdownCheckboxGroup` component is an **array** containing the values of the selected checkboxes.
 * Clicking an unselected checkbox adds its value to this array, and clicking a selected checkbox removes its value from this array.
 *
 * @name DropdownCheckboxGroup
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Array} options - An array of checkbox values (strings or key-value pairs)
 * @example
 *
 * function InterestsForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="interests"
 *          component={ DropdownCheckboxGroup }
 *          options={[
 *            'Art',
 *            'Computer Science',
 *            'Dance'
 *          ]}
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
 *
 * export default TodoForm
**/

var propTypes = _extends({}, _helpers.checkboxGroupPropTypes, {
  options: _helpers.fieldOptionsType
});

function DropdownCheckboxGroup(props) {
  var _props$input = props.input,
      name = _props$input.name,
      value = _props$input.value,
      label = props.label;

  return _react2.default.createElement(
    'fieldset',
    null,
    _react2.default.createElement(_labels.InputLabel, { label: label, name: name }),
    _react2.default.createElement(
      _helpers.DropdownSelect,
      { selectedValues: value, className: 'checkboxes' },
      _react2.default.createElement(_checkboxGroup2.default, _extends({}, props, { label: false }))
    )
  );
}

DropdownCheckboxGroup.propTypes = propTypes;

exports.default = DropdownCheckboxGroup;