'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../../helpers');

var _labels = require('../../labels');

var _filePreview = require('./file-preview');

var _filePreview2 = _interopRequireDefault(_filePreview);

var _imagePreview = require('./image-preview');

var _imagePreview2 = _interopRequireDefault(_imagePreview);

var _utils = require('../../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 *
 * A file input that can be used in a `redux-forms`-controlled form. 
 * The value of this input is the data URL of the loaded file. 
 *
 * An optional callback can be fired when the file is loaded: `onLoad(fileData, file)`. 
 * This callback will be passed the data URL of the file, as well as the `File` object itself.
 *
 * By default, this component displays a thumbnail preview of the loaded file. This preview can be customized
 * by using the `thumbnail` or `hidePreview` props, as well as by passing a custom preview via `previewComponent` or `children`.
 *
 * A component passed using `previewComponent` will receive the following props:
 * - `file`: the uploaded file object, or `null` if no file has been uploaded.
 * - `value`: the current value of the input (data URL or empty string)
 * 
 * @name FileInput
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Function} [onLoad] - A callback fired when the file is loaded
 * @param {String} [thumbnail] - A placeholder image to display before the file is loaded
 * @param {Boolean} [hidePreview] - A flag indicating whether or not to hide the file preview
 * @example
 * 
 * function HeadshotForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field 
 *          name="headshot" 
 *          component={ FileInput } 
 *          onLoad={ (fileData, file) => console.log('Loaded file!', file) }
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  onLoad: _propTypes2.default.func,
  thumbnail: _propTypes2.default.string,
  hidePreview: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  previewComponent: _propTypes2.default.func,
  children: _propTypes2.default.node
});

var defaultProps = {
  onLoad: _utils.noop
};

var FileInput = function (_React$Component) {
  _inherits(FileInput, _React$Component);

  function FileInput(props) {
    _classCallCheck(this, FileInput);

    var _this = _possibleConstructorReturn(this, (FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call(this, props));

    _this.state = { file: null };
    _this.reader = new FileReader();
    _this.loadFile = _this.loadFile.bind(_this);
    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  _createClass(FileInput, [{
    key: 'loadFile',
    value: function loadFile(e) {
      var _this2 = this;

      // Read file as data URL and call change handlers
      var file = e.target.files[0];
      this.reader.onload = function (readEvent) {
        var fileData = readEvent.target.result;
        _this2.onChange(fileData, file);
      };
      this.reader.readAsDataURL(file);
    }
  }, {
    key: 'onChange',
    value: function onChange(fileData, file) {
      // Call redux forms onChange and onLoad callback
      var _props = this.props,
          onChange = _props.input.onChange,
          onLoad = _props.onLoad;

      onChange(fileData);
      onLoad(fileData, file);
      this.setState({ file: file });
    }
  }, {
    key: 'render',
    value: function render() {
      var _omitLabelProps = (0, _helpers.omitLabelProps)(this.props),
          _omitLabelProps$input = _omitLabelProps.input,
          name = _omitLabelProps$input.name,
          value = _omitLabelProps$input.value,
          meta = _omitLabelProps.meta,
          onLoad = _omitLabelProps.onLoad,
          className = _omitLabelProps.className,
          submitting = _omitLabelProps.submitting,
          accept = _omitLabelProps.accept,
          hidePreview = _omitLabelProps.hidePreview,
          rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'onLoad', 'className', 'submitting', 'accept', 'hidePreview']);

      var file = this.state.file;

      var wrapperClass = (0, _helpers.buttonClasses)({ style: 'secondary-light', submitting: submitting });
      return _react2.default.createElement(
        _labels.LabeledField,
        this.props,
        _react2.default.createElement(
          'div',
          { className: 'fileupload fileupload-exists' },
          !hidePreview && renderPreview(_extends({ file: file, value: value }, rest)),
          _react2.default.createElement(
            'div',
            { className: wrapperClass },
            _react2.default.createElement(
              'span',
              { className: 'fileupload-exists' },
              ' Select File '
            ),
            _react2.default.createElement('input', {
              id: name,
              name: name,
              type: 'file',
              onChange: this.loadFile,
              accept: accept
            })
          )
        )
      );
    }
  }]);

  return FileInput;
}(_react2.default.Component);

// eslint-disable-next-line react/prop-types


function renderPreview(_ref) {
  var file = _ref.file,
      value = _ref.value,
      thumbnail = _ref.thumbnail,
      Component = _ref.previewComponent,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, ['file', 'value', 'thumbnail', 'previewComponent', 'children']);

  if (Component) return _react2.default.createElement(Component, _extends({ file: file, value: value }, rest));
  if (children) return children;
  var renderImagePreview = (0, _helpers.isImageType)(file) || thumbnail;
  if (renderImagePreview) return _react2.default.createElement(_imagePreview2.default, { image: value || thumbnail });
  return _react2.default.createElement(_filePreview2.default, { file: file });
}

FileInput.propTypes = propTypes;

FileInput.defaultProps = defaultProps;

exports.default = FileInput;