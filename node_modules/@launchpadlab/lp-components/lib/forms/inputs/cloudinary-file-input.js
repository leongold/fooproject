'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _fileInput = require('./file-input');

var _fileInput2 = _interopRequireDefault(_fileInput);

var _helpers = require('../helpers');

var _utils = require('../../utils');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A wrapper around the {@link FileInput} component that automatically uploads files to cloudinary via the [cloudinaryUploader](https://github.com/LaunchPadLab/lp-hoc/blob/master/docs.md#cloudinaryuploader) HOC.
 * The value of this input is the public URL of the uploaded file.
 * Additionally, the `uploadStatus` passed down from `cloudinaryUploader` will be added as a class on the input.
 * 
 * You can pass arguments to the instance of `cloudinaryUploader` via this component's props,
 * or via the `CLOUDINARY_CLOUD_NAME` and `CLOUDINARY_BUCKET` env vars (recommended).
 * 
 *
 * @name CloudinaryFileInput
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @example
 * 
 * function HeadshotForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field 
 *          name="headshotUrl" 
 *          component={ CloudinaryFileInput }
 *          cloudName="my-cloudinary-cloud"
 *          bucket="my-cloudinary-bucket"
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  upload: _propTypes2.default.func.isRequired,
  uploadStatus: _propTypes2.default.string.isRequired
});
var defaultProps = {};

function CloudinaryFileInput(_ref) {
  var input = _ref.input,
      className = _ref.className,
      upload = _ref.upload,
      uploadStatus = _ref.uploadStatus,
      rest = _objectWithoutProperties(_ref, ['input', 'className', 'upload', 'uploadStatus']);

  var onChange = input.onChange;

  return _react2.default.createElement(_fileInput2.default, _extends({
    input: _extends({}, input, { onChange: _utils.noop }),
    onLoad: function onLoad(fileData, file) {
      return upload(fileData, file).then(function (_ref2) {
        var url = _ref2.url;
        return onChange(url);
      });
    },
    className: (0, _classnames2.default)(uploadStatus, className)
  }, rest));
}

CloudinaryFileInput.propTypes = propTypes;
CloudinaryFileInput.defaultProps = defaultProps;

exports.default = (0, _utils.compose)((0, _utils.cloudinaryUploader)())(CloudinaryFileInput);