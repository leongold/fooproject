'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A range input that can be used in a `redux-forms`-controlled form. 
 * 
 * @name RangeInput
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @param {Number} [min=0] - The minumum attribute of the slider control
 * @param {Number} [max=100] - The maximum attribute of the slider control
 * @param {Number} [step=1] - The step attribute of the slider control
 * @param {Boolean} [hideLabel=false] - A boolean representing whether or not to display the range value label element
 * @example
 * 
 * function StudentForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field 
 *          name="minGPA" 
 *          component={ RangeInput } 
 *          step={ 0.5 }
 *          min={ 2.0 }
 *          max={ 4.0 }
 *       />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
**/

var propTypes = _extends({}, _helpers.fieldPropTypes, {
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  step: _propTypes2.default.number,
  hideLabel: _propTypes2.default.bool
});

var defaultProps = {
  min: 0,
  max: 100,
  step: 1,
  hideLabel: false
};

function RangeInput(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      name = _omitLabelProps$input.name,
      value = _omitLabelProps$input.value,
      onBlur = _omitLabelProps$input.onBlur,
      onChange = _omitLabelProps$input.onChange,
      meta = _omitLabelProps.meta,
      className = _omitLabelProps.className,
      min = _omitLabelProps.min,
      max = _omitLabelProps.max,
      step = _omitLabelProps.step,
      hideLabel = _omitLabelProps.hideLabel,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'className', 'min', 'max', 'step', 'hideLabel']);

  return _react2.default.createElement(
    _labels.LabeledField,
    props,
    _react2.default.createElement(
      'div',
      null,
      !hideLabel && _react2.default.createElement(
        'label',
        { className: 'range-value' },
        value
      )
    ),
    _react2.default.createElement('input', _extends({
      id: name,
      name: name,
      type: 'range',
      value: value,
      onBlur: onBlur,
      onChange: onChange,
      min: min,
      max: max,
      step: step
    }, rest))
  );
}

RangeInput.defaultProps = defaultProps;
RangeInput.propTypes = propTypes;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)())(RangeInput);