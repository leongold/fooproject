'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDatepicker = require('react-datepicker');

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _helpers = require('../helpers');

var _labels = require('../labels');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * An input component that wraps a `DatePicker` component from the [react-datepicker](https://github.com/Hacker0x01/react-datepicker) library.
 * This wrapper adds the following functionality to `DatePicker`:
 * - Adapts it to receive `redux-forms`-style input props.
 * - Converts value type from [moment](https://github.com/moment/moment) to [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date).
 * - Adds name and error labels.
 *
 * With the exception of the `input` and `meta` props, all props are passed down to the `DatePicker` component. 
 * A full list of props supported by this component can be found [here](https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md).
 *
 * _Note: this component requires special styles in order to render correctly. To include these styles in your project, follow the directions in the main [README](README.md#dateinput-styles) file._
 * 
 * @name DateInput
 * @type Function
 * @param {Object} input - A `redux-forms` [input](http://redux-form.com/6.5.0/docs/api/Field.md/#input-props) object
 * @param {Object} meta - A `redux-forms` [meta](http://redux-form.com/6.5.0/docs/api/Field.md/#meta-props) object
 * @example
 * 
 * function BirthdayForm ({ handleSubmit }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field
 *          name="birthday"
 *          component={DateInput}
 *          placeholderText="mm/dd/yyyy" 
 *        />
 *     </form>
 *   )
 * }
 *
 * // Will render datepicker with label "Birthday" and placeholder "mm/dd/yyyy"
 *
**/

var propTypes = _extends({}, (0, _helpers.fieldPropTypesWithValue)(_propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string])));

var defaultProps = {
  placeholderText: 'MM/DD/YY'
};

/* Ignore test coverage: */
/* istanbul ignore next */

function DateInput(props) {
  var _omitLabelProps = (0, _helpers.omitLabelProps)(props),
      _omitLabelProps$input = _omitLabelProps.input,
      name = _omitLabelProps$input.name,
      value = _omitLabelProps$input.value,
      _onBlur = _omitLabelProps$input.onBlur,
      _onChange = _omitLabelProps$input.onChange,
      meta = _omitLabelProps.meta,
      className = _omitLabelProps.className,
      rest = _objectWithoutProperties(_omitLabelProps, ['input', 'meta', 'className']);

  var momentValue = value ? (0, _moment2.default)(value) : null;
  return _react2.default.createElement(
    _labels.LabeledField,
    props,
    _react2.default.createElement(_reactDatepicker2.default, _extends({
      id: name,
      name: name,
      selected: momentValue,
      onBlur: function onBlur() {
        return _onBlur(value);
      },
      onChange: function onChange(val) {
        return _onChange(val ? val.toDate() : '');
      }
    }, rest))
  );
}

DateInput.defaultProps = defaultProps;
DateInput.propTypes = propTypes;

exports.default = (0, _utils.compose)((0, _helpers.blurDirty)())(DateInput);