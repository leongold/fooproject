'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An Input component that is hidden from the page. The input element is hidden with CSS instead 
 * of using `type="hidden` so that Cypress can still access its value.
 *
 * Aside from being hidden, this component is identical to {@link Input},
 * and will take the same props.
 *
 * @name HiddenInput
 * @type Function
 * @example
 *
 * // Let's say we want the user ID to be included in the form submission,
 * // but we don't want it to be editable:
 *
 * function UserForm ({ handleSubmit }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *        <Field name="user.name" component={ Input } />
 *        <Field name="user.id" component={ HiddenInput } />
 *     </form>
 *   )
 * }
 *
**/

var hiddenStyle = {
  position: 'absolute',
  left: -9999
};

function HiddenInput(props) {
  return _react2.default.createElement(
    'div',
    { style: hiddenStyle },
    _react2.default.createElement(_input2.default, _extends({ tabIndex: '-1' }, props))
  );
}

exports.default = HiddenInput;