'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _inputError = require('./input-error');

var _inputError2 = _interopRequireDefault(_inputError);

var _inputLabel = require('./input-label');

var _inputLabel2 = _interopRequireDefault(_inputLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A fieldset wrapper for redux-form controlled inputs. This wrapper adds an {@link InputLabel}
 * above the wrapped component and an {@link InputError} below. Additionally, it adds the class `"error"`
 * to the fieldset if the input is touched and invalid.
 *
 * In order to populate the `InputLabel` and `InputError` correctly, you should pass all the props of the corresponding input
 * to this component. To prevent label-specific props from being passed to the input itself,
 * use the {@link omitLabelProps} helper.
 *
 * @name LabeledField
 * @type Function
 * @param {Boolean} [hideErrorLabel] A boolean determining whether to hide the error label on input error (optional, default `false`)
 *
 * @example
 *
 * // A custom input to use with redux-forms
 *
 * function LabeledPhoneInput (props) {
 *   const {
 *      input: { name, value, onBlur, onChange },
 *      ...rest,
 *   } = omitLabelProps(props)
 *   return (
 *      <LabeledField { ...props }>
 *        <input {...{
 *          type: 'phone',
 *          name,
 *          value,
 *          onBlur,
 *          onChange,
 *          ...rest,
 *        }}
 *     </LabeledField>
 *   )
 * }
 *
**/

var propTypes = _extends({}, _inputLabel2.default.propTypes, _inputError2.default.propTypes, {
  children: _propTypes2.default.node,
  hideErrorLabel: _propTypes2.default.bool
});

var defaultProps = {
  hideErrorLabel: false
};

function LabeledField(_ref) {
  var name = _ref.input.name,
      _ref$meta = _ref.meta,
      error = _ref$meta.error,
      touched = _ref$meta.touched,
      invalid = _ref$meta.invalid,
      className = _ref.className,
      hint = _ref.hint,
      label = _ref.label,
      tooltip = _ref.tooltip,
      required = _ref.required,
      requiredIndicator = _ref.requiredIndicator,
      children = _ref.children,
      hideErrorLabel = _ref.hideErrorLabel;

  return _react2.default.createElement(
    'fieldset',
    { className: (0, _classnames2.default)(className, { 'error': touched && invalid }) },
    _react2.default.createElement(_inputLabel2.default, { hint: hint, label: label, name: name, tooltip: tooltip, required: required, requiredIndicator: requiredIndicator }),
    children,
    !hideErrorLabel && _react2.default.createElement(_inputError2.default, { error: error, invalid: invalid, touched: touched })
  );
}

LabeledField.propTypes = propTypes;

LabeledField.defaultProps = defaultProps;

exports.default = LabeledField;