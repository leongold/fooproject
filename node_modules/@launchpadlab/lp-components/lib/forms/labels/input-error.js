'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A dynamic error label associated with an input component.
 *
 * This component is used within {@link LabeledField}, and therefore is incorporated into most `lp-components` input components by default.
 *
 * The error label uses the following rules to determine how it will be displayed:
 * - If the input is `invalid` and `touched`, the label will be shown
 * - If the `error` prop is set to a string, the label will display that text
 * - If the `error` prop is set to an array of strings, the label will display those errors separated by commas
 *
 * In addition to the props below, any extra props will be passed directly to the inner `<span>` element.
 *
 * @name InputError
 * @type Function
 * @param {String|Array} error - An error message or array of error messages to display
 * @param {Boolean} invalid - Whether the associated input has an invalid value
 * @param {String} touched - Whether the associated input has been touched
 *
 * @example
 * 
 * // A custom input to use with redux-forms
 * 
 * function ValidatedInput ({  
 *   input: { name, value, onBlur, onChange },
 *   meta: { error, touched, invalid },
 * }) {
 *   return (
 *      <div>
 *       <input {...{
 *          name,
 *          value,
 *          onBlur,
 *          onChange,   
 *       }}
 *       <InputError { ...{ error, invalid, touched } } />
 *     </div>
 *   )
 * }
 *
**/

var propTypes = {
  error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
  invalid: _propTypes2.default.bool,
  touched: _propTypes2.default.bool,
  className: _propTypes2.default.string
};

var defaultProps = {
  error: null,
  invalid: false,
  touched: false,
  className: ''
};

function InputError(_ref) {
  var error = _ref.error,
      invalid = _ref.invalid,
      touched = _ref.touched,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ['error', 'invalid', 'touched', 'className']);

  return touched && invalid ? _react2.default.createElement(
    'span',
    _extends({
      className: (0, _classnames2.default)('error-message', className)
    }, rest),
    formatError(error)
  ) : null;
}

function formatError(error) {
  return Array.isArray(error) ? error.join(', ') : error;
}

InputError.propTypes = propTypes;
InputError.defaultProps = defaultProps;

exports.default = InputError;