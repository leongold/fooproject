'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _helpers = require('../helpers');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A dynamic label associated with an input component.
 *
 * This component is used within {@link LabeledField}, and therefore is incorporated into most `lp-components` input components by default.
 *
 * The text of the label is set using the following rules:
 * - If the `label` prop is set to `false`, the label is hidden completely
 * - If the `label` prop is set to a string, the label will display that text
 * - Otherwise, the label will be set using the `name` prop.
 *
 * If `name` is used to set the text, it will be stripped of its prefixes and converted to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
 *
 * For instance: `'person.firstName'` becomes `'First Name'`
 *
 * @name InputLabel
 * @type Function
 * @param {String} name - The name of the associated input
 * @param {String} [hint] - A usage hint for the associated input
 * @param {String|Boolean} [label] - Custom text for the label
 * @param {String} [tooltip] - A message to display in a tooltip
 * @param {Boolean} [required] - A boolean value to indicate whether the field is required
 * @param {String} [requiredIndicator] - Custom character to denote a field is required (optional, default `''`)

 * @example
 *
 * // A custom input to use with redux-forms
 *
 * function EmailInput ({
 *   input: { name, value, onBlur, onChange },
 *   label,
 * }) {
 *   return (
 *      <div>
 *       <InputLabel name={name} label={label} />
 *       <input {...{
 *          type: 'email',
 *          name,
 *          value,
 *          onBlur,
 *          onChange,
 *       }}
 *     </div>
 *   )
 * }
 *
**/

var propTypes = _extends({
  hint: _propTypes2.default.string,
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
  name: _propTypes2.default.string.isRequired,
  tooltip: _propTypes2.default.string,
  required: _propTypes2.default.bool,
  requiredIndicator: _propTypes2.default.string
}, (0, _utils.togglePropTypes)('tooltipShown'));

var defaultProps = {
  hint: '',
  label: '',
  tooltip: '',
  requiredIndicator: ''
};

function InputLabel(_ref) {
  var hint = _ref.hint,
      label = _ref.label,
      name = _ref.name,
      tooltip = _ref.tooltip,
      tooltipShown = _ref.tooltipShown,
      toggleTooltipShown = _ref.toggleTooltipShown,
      required = _ref.required,
      requiredIndicator = _ref.requiredIndicator;

  var labelText = label || (0, _helpers.convertNameToLabel)(name);
  return _react2.default.createElement(
    'span',
    null,
    label !== false && _react2.default.createElement(
      'label',
      { htmlFor: name },
      labelText,
      required && requiredIndicator && _react2.default.createElement(
        'span',
        { className: 'required-indicator', 'aria-hidden': 'true' },
        requiredIndicator
      ),
      hint && _react2.default.createElement(
        'i',
        null,
        hint
      )
    ),
    tooltip && _react2.default.createElement('span', { className: 'tooltip-trigger', onClick: toggleTooltipShown }),
    tooltip && _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)('tooltip-content', { 'is-active': tooltipShown }) },
      tooltip
    )
  );
}

InputLabel.propTypes = propTypes;

InputLabel.defaultProps = defaultProps;

exports.default = (0, _utils.toggle)('tooltipShown')(InputLabel);