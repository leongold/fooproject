'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../../utils');

var _lpHoc = require('@launchpadlab/lp-hoc');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = _extends({
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  selectedValues: _propTypes2.default.arrayOf(_propTypes2.default.string),
  text: _propTypes2.default.string
}, (0, _lpHoc.togglePropTypes)('expanded'));

var defaultProps = {
  className: '',
  selectedValues: []
};

// Wraps the `DropdownCheckboxGroup` component

function DropdownSelect(_ref) {
  var children = _ref.children,
      className = _ref.className,
      expanded = _ref.expanded,
      selectedValues = _ref.selectedValues,
      toggleExpanded = _ref.toggleExpanded;

  return _react2.default.createElement(
    'div',
    { className: 'dropdown-select' },
    _react2.default.createElement(
      'div',
      { className: 'select-input', onClick: toggleExpanded },
      _react2.default.createElement(
        'p',
        null,
        getLabel(selectedValues)
      )
    ),
    _react2.default.createElement(
      'div',
      {
        className: (0, _classnames2.default)(className, 'options', {
          'is-active': expanded
        }) },
      _react2.default.createElement(
        'div',
        { className: 'scroll-box' },
        children
      )
    )
  );
}

DropdownSelect.propTypes = propTypes;

DropdownSelect.defaultProps = defaultProps;

function getLabel(values) {
  return values.length ? values.join(', ') : 'None';
}

function handleClickOutside(_ref2) {
  var setExpanded = _ref2.setExpanded;

  return setExpanded(false);
}

exports.default = (0, _utils.compose)((0, _lpHoc.toggle)('expanded'), (0, _lpHoc.onOutsideClick)(handleClickOutside))(DropdownSelect);