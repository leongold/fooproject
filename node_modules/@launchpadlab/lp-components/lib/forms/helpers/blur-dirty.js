'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A function that returns an HOC to wrap a `redux-forms`-controlled input. 
 * 
 * If the input is pristine, this HOC replaces the passed `onBlur` with an empty function.
 * This prevents the form from being re-validated unless its value has changed.
 * This behavior can be overridden by passing the wrapped component an `alwaysBlur` prop with the value `true`.
 * 
 * Note: every input in lp-components has been wrapped in this HOC.
 * 
 * @name blurDirty
 * @type Function
 * @example
 * 
 * function TextForm ({ handleSubmit, pristine, invalid, submitting }) {
 *   return (
 *     <form onSubmit={ handleSubmit }>
 *       <Field name="text" component={ Input } />
 *       <SubmitButton {...{ pristine, invalid, submitting }}>
 *         Submit
 *       </SubmitButton>
 *     </form>
 *   )
 * }
 *
 * export default compose(
 *    blurDirty()
 * )(TextForm)
**/

/* eslint react/prop-types: off */

function blurDirty() {
  return function (Wrapped) {
    function Wrapper(props) {
      var pristine = props.meta.pristine,
          alwaysBlur = props.alwaysBlur;

      var disableBlur = pristine && !alwaysBlur;
      var passedProps = disableBlur ? (0, _utils.set)('input.onBlur', _utils.noop, props) : props;
      return _react2.default.createElement(Wrapped, (0, _utils.omit)('alwaysBlur', passedProps));
    }
    Wrapper.displayName = (0, _utils.wrapDisplayName)(Wrapped, 'blurDirty');
    Wrapper.propTypes = {
      alwaysBlur: _propTypes2.default.bool
    };
    return Wrapper;
  };
}

exports.default = blurDirty;