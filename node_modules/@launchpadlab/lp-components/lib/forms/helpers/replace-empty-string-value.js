'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A function that returns an HOC to wrap a `redux-forms`-controlled input. 
 *
 * This HOC transforms empty string values into a different specified value.
 * This helps inputs with non-string values avoid PropType errors when provided with 
 * the default redux-form initial value (an empty string).
 * 
 * @name replaceEmptyStringValue
 * @param {*} [replacement=''] The value that will replace an empty string value
 * @type Function
 * @example
 * 
 * function Checkbox ({ input: { value } }) {
 *   return (
 *     <input type="checkbox" value={ value }>
 *   )
 * }
 *
 * Checkbox.propTypes = PropTypes.shape({
 *    input: PropTypes.shape({
 *      value: PropTypes.bool,
 *    })
 * })
 *
 * export default compose(
 *    replaceEmptyStringValue(false)
 * )(Checkbox)
**/

/* eslint react/prop-types: off */

function replaceEmptyStringValue() {
  var replacement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  return function (Wrapped) {
    function Wrapper(props) {
      var value = props.input.value;

      var passedProps = value === '' ? (0, _utils.set)('input.value', replacement, props) : props;
      return _react2.default.createElement(Wrapped, passedProps);
    }
    Wrapper.displayName = (0, _utils.wrapDisplayName)(Wrapped, 'replaceEmptyStringValue');
    return Wrapper;
  };
}

exports.default = replaceEmptyStringValue;