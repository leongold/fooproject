'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A wrapper component that visually indicates whether a child component
 * is loading, or loaded. 
 * 
 * LoadingContainer renders child components with modified opacity
 * depending on whether `isLoading` is true or false 
 *
 * 
 * @name LoadingContainer
 * @type Function
 * @param {Boolean} [isLoading=false] Whether the inner component should be indicated as loading
 * @example
 * 
 * function PatientIndex ({ patientProfiles }) {
 *   return (
 *      <div>
 *         <LoadingContainer isLoading={ !patientProfiles }>
 *           <div> Child Component </div>
 *         </LoadingContainer>
 *      </div>
 *   )
 * }
 *
**/

var propTypes = {
  isLoading: _propTypes2.default.bool.isRequired,
  children: _propTypes2.default.node
};

var defaultProps = {
  isLoading: false
};

function LoadingContainer(_ref) {
  var isLoading = _ref.isLoading,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, ['isLoading', 'children']);

  return _react2.default.createElement(
    'div',
    _extends({
      className: (0, _classnames2.default)({ 'is-loading': isLoading })
    }, (0, _utils.filterInvalidDOMProps)(rest)),
    children
  );
}

LoadingContainer.propTypes = propTypes;
LoadingContainer.defaultProps = defaultProps;

exports.default = LoadingContainer;