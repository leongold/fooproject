'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = calculateMiddlePages;

var _utils = require('../../utils');

// Returns a range of "middle" page numbers to show
function calculateMiddlePages(currentPage, min, max, numPagesShown) {
  if (min > max) throw new Error('Paginator: min must be <= max');
  // If no middle pages required, return empty array
  if (max === min) return [];
  // Get indices of first and last pages

  var _getFirstAndLastPages = getFirstAndLastPages(currentPage, min, max, numPagesShown),
      _getFirstAndLastPages2 = _slicedToArray(_getFirstAndLastPages, 2),
      firstPage = _getFirstAndLastPages2[0],
      lastPage = _getFirstAndLastPages2[1];
  // Generate range of page numbers


  return (0, _utils.range)(firstPage, lastPage + 1);
}

function getFirstAndLastPages(currentPage, min, max, numPagesShown) {
  // Don't overlap with min and max pages
  var lowestPossiblePage = min + 1;
  var highestPossiblePage = max - 1;
  // Default to showing all pages
  if (!numPagesShown) return [lowestPossiblePage, highestPossiblePage];
  // Calculate pages before and after current page

  var _getPagesAroundCurren = getPagesAroundCurrent(currentPage, numPagesShown),
      _getPagesAroundCurren2 = _slicedToArray(_getPagesAroundCurren, 2),
      firstPage = _getPagesAroundCurren2[0],
      lastPage = _getPagesAroundCurren2[1];
  // Trim to min and max


  if (firstPage < lowestPossiblePage) {
    // Offset last page but trim at upper limit
    var offsetLastPage = min + numPagesShown - 1;
    var trimmedLastPage = Math.min(highestPossiblePage, offsetLastPage);
    return [lowestPossiblePage, trimmedLastPage];
  }
  if (lastPage > highestPossiblePage) {
    // Offset first page but trim at lower limit
    var offsetFirstPage = max - numPagesShown + 1;
    var trimmedFirstPage = Math.max(lowestPossiblePage, offsetFirstPage);
    return [trimmedFirstPage, highestPossiblePage];
  }
  return [firstPage, lastPage];
}

function getPagesAroundCurrent(currentPage, numPagesShown) {
  // Calculate num pages to put to left and right of current page
  var pagesBeforeCurrent = Math.floor(numPagesShown / 2);
  var pagesAfterCurrent = numPagesShown - (pagesBeforeCurrent + 1);
  // Calculate first and last page
  var firstPage = currentPage - pagesBeforeCurrent;
  var lastPage = currentPage + pagesAfterCurrent;
  return [firstPage, lastPage];
}