'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../../utils');

var _calculateMiddlePages = require('./calculate-middle-pages');

var _calculateMiddlePages2 = _interopRequireDefault(_calculateMiddlePages);

var _delimiter = require('./delimiter');

var _delimiter2 = _interopRequireDefault(_delimiter);

var _pageLink = require('./page-link');

var _pageLink2 = _interopRequireDefault(_pageLink);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 
 * @name Paginator
 * @type Function
 * @description A control component for navigating between multiple numbered pages.
 * @param {Number} [value=1] - The number of the current page
 * @param {Function} [onChange] - A function called with the new value when a page is clicked.
 * @param {Number} [min=1] The number of the first page
 * @param {Number} [max=1] The number of the last page.
 * @param {Boolean} [alwaysShow=false] Always show the component, even when there's only one page visible.
 * @param {Number} [pagesShown=3] The number of pages to display around (and including) the current page
 * @param {String} [previousLabel='Prev'] The text of the "previous page" button
 * @param {String} [nextLabel='Next'] The text of the "next page" button
 * @example
 * 
 * function ShowPages ({ pages, currentPage, changeCurrentPage }) {
 *   return (
 *     <div>
 *       <Page 
 *         page={pages[currentPage]} 
 *       />
 *       <Paginator 
 *         value={currentPage}
 *         onChange={changeCurrentPage}
 *         max={pages.length}
 *       />
 *     </div>
 *   )
 * }
**/

var propTypes = {
  value: _propTypes2.default.number,
  onChange: _propTypes2.default.func,
  min: _propTypes2.default.number,
  max: _propTypes2.default.number,
  alwaysShow: _propTypes2.default.bool,
  pagesShown: _propTypes2.default.number,
  previousLabel: _propTypes2.default.string,
  nextLabel: _propTypes2.default.string
};

var defaultProps = {
  value: 1,
  onChange: _utils.noop,
  min: 1,
  max: 1,
  alwaysShow: false,
  pagesShown: 3,
  previousLabel: 'Prev',
  nextLabel: 'Next'
};

function Paginator(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      min = _ref.min,
      max = _ref.max,
      alwaysShow = _ref.alwaysShow,
      pagesShown = _ref.pagesShown,
      previousLabel = _ref.previousLabel,
      nextLabel = _ref.nextLabel;

  // Hide if there's only one page
  var totalPages = max - min + 1;
  if (totalPages === 1 && !alwaysShow) return EmptyState;

  var middlePages = (0, _calculateMiddlePages2.default)(value, min, max, pagesShown);

  return _react2.default.createElement(
    'div',
    { className: 'pagination' },
    _react2.default.createElement(
      'ul',
      null,
      value > min && _react2.default.createElement(
        _pageLink2.default,
        {
          className: 'prev',
          onClick: function onClick() {
            return onChange(value - 1);
          }
        },
        previousLabel
      ),
      _react2.default.createElement(
        _pageLink2.default,
        {
          active: value === min,
          onClick: function onClick() {
            return onChange(min);
          }
        },
        min
      ),

      // If there are hidden pages between first page and first "middle" page
      middlePages[0] > min + 1 && _react2.default.createElement(_delimiter2.default, null),
      middlePages.map(function (page) {
        return _react2.default.createElement(
          _pageLink2.default,
          {
            key: page,
            active: value === page,
            onClick: function onClick() {
              return onChange(page);
            }
          },
          page
        );
      }),

      // If there are hidden pages between last "middle" page and last page
      middlePages[middlePages.length - 1] < max - 1 && _react2.default.createElement(_delimiter2.default, null),
      max !== min && _react2.default.createElement(
        _pageLink2.default,
        {
          active: value === max,
          onClick: function onClick() {
            return onChange(max);
          }
        },
        max
      ),
      value < max && _react2.default.createElement(
        _pageLink2.default,
        {
          className: 'next',
          onClick: function onClick() {
            return onChange(value + 1);
          }
        },
        nextLabel
      )
    )
  );
}

var EmptyState = _react2.default.createElement(
  'div',
  { className: 'pagination' },
  _react2.default.createElement('ul', null)
);

Paginator.propTypes = propTypes;
Paginator.defaultProps = defaultProps;

exports.default = Paginator;