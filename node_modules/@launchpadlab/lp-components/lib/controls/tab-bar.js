'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _fieldPropTypes = require('../forms/helpers/field-prop-types');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *
 * @name TabBar
 * @type Function
 * @description A control component for navigating among multiple tabs
 * @param {Boolean} [vertical] A boolean setting the `className` of the `ul` to 'horizontal' (default), or 'vertical', which determines the alignment of the tabs (optional, default `false`)
 * @param {Array} [options] An array of tab values (strings or key-value pairs)
 * @param {String|Number} [value] - The value of the current tab
 * @param {Function} [onChange] - A function called with the new value when a tab is clicked
 * @param {String} [activeClassName] - The class of the active tab, (optional, default `active`)
 * @example
 *
 * function ShowTabs ({ currentTab, setCurrentTab }) {
 *   return (
 *     <div>
 *       <TabBar
 *         options={['Tab 1', 'Tab 2']}
 *         value={currentTab}
 *         onChange={setCurrentTab}
 *       />
 *     </div>
 *   )
 * }
**/

var propTypes = {
  vertical: _propTypes2.default.bool,
  options: _fieldPropTypes.fieldOptionsType,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  onChange: _propTypes2.default.func,
  className: _propTypes2.default.string,
  activeClassName: _propTypes2.default.string
};

var defaultProps = {
  vertical: false,
  options: [],
  value: '',
  onChange: _utils.noop,
  className: '',
  activeClassName: 'active'
};

function TabBar(_ref) {
  var vertical = _ref.vertical,
      options = _ref.options,
      value = _ref.value,
      onChange = _ref.onChange,
      className = _ref.className,
      activeClassName = _ref.activeClassName;

  var optionObjects = (0, _utils.serializeOptions)(options);
  var alignment = vertical ? 'vertical' : 'horizontal';
  return _react2.default.createElement(
    'ul',
    { className: (0, _classnames3.default)('tabs', alignment + '-tabs', className) },
    optionObjects.map(function (_ref2) {
      var key = _ref2.key,
          optionValue = _ref2.value;
      return _react2.default.createElement(
        'li',
        {
          className: (0, _classnames3.default)(_defineProperty({}, activeClassName, optionValue === value)),
          key: key
        },
        _react2.default.createElement(
          'a',
          { onClick: function onClick() {
              onChange(optionValue);
            } },
          key
        )
      );
    })
  );
}

TabBar.propTypes = propTypes;

TabBar.defaultProps = defaultProps;

exports.default = TabBar;