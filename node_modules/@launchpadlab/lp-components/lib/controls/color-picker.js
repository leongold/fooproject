'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Chrome = require('react-color/lib/Chrome');

var _Chrome2 = _interopRequireDefault(_Chrome);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * @name ColorPicker
 * @type Function
 * @description A control component for picking a hex color value. Built using the [react-color](https://casesandberg.github.io/react-color/) `ChromePicker`.
 * @param {String} [value] - The hex value of the selected color
 * @param {Function} [onChange] - A function called with the new hex value when a color is selected
 * @param {Function} [onOpen] A function called when the picker is expanded
 * @param {Function} [onClose] A function called when the picker is closed
 * @param {Boolean} [active] - A boolean that controls whether the picker is expanded or not.
 * @example
 *
 * function BackgroundSetter ({ backgroundColor, setBackgroundColor }) {
 *   return (
 *     <div>
 *       <h1> Set background color </h1>
 *       <ColorPicker
 *         value={ backgroundColor }
 *         onChange={ setBackgroundColor }
 *       />
 *     </div>
 *   )
 * }
 * 
**/

var propTypes = _extends({
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired,
  onOpen: _propTypes2.default.func.isRequired,
  onClose: _propTypes2.default.func.isRequired,
  active: _propTypes2.default.bool
}, (0, _utils.togglePropTypes)('expanded'));

var defaultProps = {
  value: '#000000',
  onChange: _utils.noop,
  onOpen: _utils.noop,
  onClose: _utils.noop
};

function ColorPicker(_ref) {
  var value = _ref.value,
      _onChange = _ref.onChange,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      expanded = _ref.expanded,
      toggleExpanded = _ref.toggleExpanded,
      rest = _objectWithoutProperties(_ref, ['value', 'onChange', 'onOpen', 'onClose', 'expanded', 'toggleExpanded']);

  return _react2.default.createElement(
    'div',
    { className: 'color-picker' },
    _react2.default.createElement('span', {
      className: 'swatch',
      style: { background: value || 'black' },
      onClick: function onClick() {
        toggleExpanded();
        return onOpen();
      }
    }),
    expanded && _react2.default.createElement(
      'div',
      { className: 'popover' },
      _react2.default.createElement('div', {
        className: 'cover',
        onClick: function onClick() {
          toggleExpanded();
          return onClose();
        }
      }),
      _react2.default.createElement(_Chrome2.default, _extends({
        color: value,
        onChange: function onChange(_ref2) {
          var hex = _ref2.hex;
          return _onChange(hex);
        },
        disableAlpha: true
      }, rest))
    )
  );
}

ColorPicker.propTypes = propTypes;
ColorPicker.defaultProps = defaultProps;

// Active should override expanded (allow external control)
function modify(_ref3) {
  var active = _ref3.active,
      expanded = _ref3.expanded;

  return {
    expanded: active === undefined ? expanded : active
  };
}

exports.default = (0, _utils.compose)((0, _utils.toggle)('expanded'), (0, _utils.modifyProps)(modify))(ColorPicker);