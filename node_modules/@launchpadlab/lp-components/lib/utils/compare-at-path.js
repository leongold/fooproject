'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _get = require('lodash/fp/get');

var _get2 = _interopRequireDefault(_get);

var _curry = require('lodash/fp/curry');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * A function which returns a comparison function that extracts values at a 
 * certain path, and runs given comparison function on those values.
 *
 * @name compareAtPath
 * @type Function
 * @param {String} path - Name of the path to values
 * @param {Function} func - Comparison function to run on values at specified path
 * @returns {Function} Comparison function
 *
 * @example
 * 
 * const people = [
 *  { name: 'Brad', age: 66 },
 *  { name: 'Georgina', age: 35 }
 * ]
 * 
 * const sortAscending = (a, b) => a - b
 *
 * const ageComparator = compareAtPath('age', sortAscending)
 *
 * people.sort(ageComparator)
 * 
 * // [
 * //   { name: 'Georgina', age: 35 },
 * //   { name: 'Brad', age: 66 },
 * // ]
 *
**/

function compareAtPath(path, func) {
  var getter = (0, _get2.default)(path);
  return function compare(a, b) {
    var _map = [a, b].map(getter),
        _map2 = _slicedToArray(_map, 2),
        aValue = _map2[0],
        bValue = _map2[1];

    return func(aValue, bValue);
  };
}

exports.default = (0, _curry2.default)(compareAtPath);