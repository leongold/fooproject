'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = serializeOptionGroups;

var _serializeOptions = require('./serialize-options');

var _serializeOptions2 = _interopRequireDefault(_serializeOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * Function that transforms options within an option group array into 
 * object options with keys of `key` and `value`
 *
 * @name serializeOptionGroups
 * @type Function
 * @param {Array} optionGroupArray - Array of option values
 * @returns {Array} Array of object group options
 *
 * @example
 *
 * const optionGroups = [ 
 *  { name: 'fruits', options: ['apple', 'banana'] },
 *  { name: 'veggies', options: ['lettuce', 'pepper'] },
 * ]
 *
 * serializeOptionGroups(optionGroups)
 *
 * // [
 * //   { 
 * //     name: 'fruits', 
 * //     options: [{ key: 'apple', value: 'apple' }, { key: 'banana', value: 'banana' }] 
 * //   }, 
 * //   { 
 * //     name: 'veggies', 
 * //     options: [{ key: 'lettuce', value: 'lettuce' }, { key: 'pepper', value: 'pepper' }] 
 * //   },
 * // ]
 *
**/

function serializeOptionGroups(optionGroupArray) {
  return optionGroupArray.map(function (group) {
    return _extends({}, group, { options: (0, _serializeOptions2.default)(group.options) });
  });
}