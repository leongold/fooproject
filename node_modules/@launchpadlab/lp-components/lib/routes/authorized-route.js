'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.AuthorizedRoute = AuthorizedRoute;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require('react-router');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 *
 * A [react-router](https://github.com/ReactTraining/react-router) `Route` component that requires an auth function to return `true` before it can be entered.
 *
 * Note: this component is only compatible with react-router ^3.0.0.
 * 
 * @name AuthorizedRoute
 * @type Function
 * @param {Function} authFunction - A function that returns true or false, indicating whether the current user is authenticated
 * @param {String} [redirect='/sign-in'] - A redirect path if the user is not authenticated
 * @example
 * 
 * function isMember () {
 *    return someUser.isMember()
 * }
 *
 * const MyRoutes = (
 *     <Route path="/" component={ Layout }>
 *        <Route path="/welcome" component={ WelcomePage } />
 *        <AuthorizedRoute 
 *           path="/members" 
 *           component={ MembersPage }
 *           authFunction={ isMember }
 *           redirect="/welcome"
 *        />
 *     </Route>
 * )
**/

var propTypes = {
  authFunction: _propTypes2.default.func.isRequired,
  redirect: _propTypes2.default.string
};

var defaultProps = {
  redirect: '/sign-in'
};

// Note: this component is exported directly for testing
function AuthorizedRoute(_ref) {
  var authFunction = _ref.authFunction,
      redirect = _ref.redirect,
      rest = _objectWithoutProperties(_ref, ['authFunction', 'redirect']);

  function handleRouteChange(prevState, nextState, replace) {
    var isAuthenticated = authFunction();
    if (!isAuthenticated) return replace({ pathname: redirect, state: { redirectUrl: nextState.location.pathname } });
  }
  return _react2.default.createElement(_reactRouter.Route, _extends({
    onEnter: function onEnter() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return handleRouteChange.apply(undefined, [''].concat(args));
    } /* onEnter isn't called with prevState, so we add it here */,
    onChange: handleRouteChange
  }, rest));
}

AuthorizedRoute.propTypes = propTypes;
AuthorizedRoute.defaultProps = defaultProps;

exports.default = (0, _utils.compose)((0, _utils.adaptToReactRouter)())(AuthorizedRoute);