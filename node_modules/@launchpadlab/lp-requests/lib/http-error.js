'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')}return call&&(typeof call==='object'||typeof call==='function')?call:self}function _inherits(subClass,superClass){if(typeof superClass!=='function'&&superClass!==null){throw new TypeError('Super expression must either be null or a function, not '+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var HttpError=function(_Error){_inherits(HttpError,_Error);function HttpError(status,statusText,response){var errors=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};_classCallCheck(this,HttpError);var _this=_possibleConstructorReturn(this,(HttpError.__proto__||Object.getPrototypeOf(HttpError)).call(this));_this.name='HttpError';_this.status=status;_this.statusText=statusText;_this.response=response;_this.errors=errors;_this.message=status+' - '+statusText;return _this}return HttpError}(Error);exports.default=HttpError;